-- #################################################### --

local cg_c3e3f_texture_sampler = class(Node)

function cg_c3e3f_texture_sampler:get_help(out)
  out.write[[TODO]]
end

function cg_c3e3f_texture_sampler:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
        self.texture_choices = { 'decal0',
                                 'decal1',  
                                 'decal2',  }
  self.texture_ndx = 1
  self.name = 'Texture Sampler2D (decal0)'
end

function cg_c3e3f_texture_sampler:get_type(port)
  return 'sampler2D'
end

function cg_c3e3f_texture_sampler:config(props)
  Node.config(self, props)
  props.delete('Name')

  props.list(
    'Decal',
    self.texture_choices,
    function() return self.texture_ndx end,
    function(v) self.name = 'Texture Sampler2D (' .. self.texture_choices[v] .. ')' self.texture_ndx = v end
  )
end

function cg_c3e3f_texture_sampler:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' ' .. self.texture_choices[self.texture_ndx] .. '\n' )
end

function cg_c3e3f_texture_sampler:get_tip(out)
  out.write( 'uniform sampler2d <Selected Texture> : TEX0' )
end

-- #################################################### --

local cg_c3e3f_decal_texcoord = class(Node)

function cg_c3e3f_decal_texcoord:get_help(out)
  out.write[[TODO]]
end

function cg_c3e3f_decal_texcoord:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
end

function cg_c3e3f_decal_texcoord:get_type(port)
  return 'float2'
end

function cg_c3e3f_decal_texcoord:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function cg_c3e3f_decal_texcoord:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' texCoord\n' )
end

function cg_c3e3f_decal_texcoord:get_tip(out)
  out.write( 'float2 texCoord : TEXCOORD0' )
end

-- #################################################### --

local cg_c3e3f_time = class(Node)

function cg_c3e3f_time:get_help(out)
  out.write[[TODO]]
end

function cg_c3e3f_time:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
end

function cg_c3e3f_time:get_type(port)
  return 'float'
end

function cg_c3e3f_time:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function cg_c3e3f_time:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' time\n' )
end

function cg_c3e3f_time:get_tip(out)
  out.write( 'uniform float time' )
end

-- #################################################### --

local cg_c3e3f_output_color = class(Node)

function cg_c3e3f_output_color:get_help(out)
  out.write[[TODO]]
end

function cg_c3e3f_output_color:new()
  Node.new(self)
  self.a = self.add_port(Input('a'))
end

function cg_c3e3f_output_color:get_type(port)
  return nil
end

function cg_c3e3f_output_color:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function cg_c3e3f_output_color:gen_code(out, scratch)
  local a    = 'r' .. self.a.get_output().hex()

  out.write( '\tOUT.color = ' .. a .. ';\n' )
end

function cg_c3e3f_output_color:get_tip(out)
  out.write( 'OUT.color = a' )
end

-- #################################################### --

register {
  __name = 'Cg [_C3E3 fragment]',
  __prologue = '',
  __epilogue = '',

  ['Texture sampler2D'] = cg_c3e3f_texture_sampler,
  ['Output Color'] = cg_c3e3f_output_color,
  ['Decal TexCoord'] = cg_c3e3f_decal_texcoord,
  ['Time'] = cg_c3e3f_time,
}
