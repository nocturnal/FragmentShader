<?xml version="1.0"?>
<library path="Cg/Select">
	<node type="Select Less Than">
		<description><![CDATA[d = if ( x < y ) then a else b

			Supported Types:

			float
			half
			fixed
			int
			float4
			half4
			fixed4
			int4
			float3
			half3
			fixed3
			int3
			float2
			half2
			fixed2
			int2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="a">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="b">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<output name="d">
				<get-type method="same-as" target="*">a</get-type>
			</output>
			<input-constraints method="lua" target="*">
				return node.x.get_type() == node.y.get_type() and node.a.get_type() == node.b.get_type()
			</input-constraints>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					type = node.d.get_type(),
					x    = 'r' .. node.x.get_source().uid(),
					y    = 'r' .. node.y.get_source().uid(),
					a    = 'r' .. node.a.get_source().uid(),
					b    = 'r' .. node.b.get_source().uid(),
					d    = 'r' .. node.d.uid()
				}
				if type == 'float' or type == 'half' or type == 'float4' or type == 'float3' or type == 'half3' or type == 'float2' or type == 'half2' then
					return (('type d = lerp( b, a, type( x < y ) );'):gsub('[%w_]+', s))
				else
					return (('type d = ( type( x < y ) * a ) + ( type( !( x < y ) ) * b );'):gsub('[%w_]+', s))
				end				
			]]></code>
		</code-generation>
	</node>
	<node type="Select Greater Than">
		<description><![CDATA[d = if ( x > y ) then a else b

			Supported Types:

			float
			half
			fixed
			int
			float4
			half4
			fixed4
			int4
			float3
			half3
			fixed3
			int3
			float2
			half2
			fixed2
			int2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="a">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="b">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<output name="d">
				<get-type method="same-as" target="*">a</get-type>
			</output>
			<input-constraints method="lua" target="*">
				return node.x.get_type() == node.y.get_type() and node.a.get_type() == node.b.get_type()
			</input-constraints>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					type = node.d.get_type(),
					x    = 'r' .. node.x.get_source().uid(),
					y    = 'r' .. node.y.get_source().uid(),
					a    = 'r' .. node.a.get_source().uid(),
					b    = 'r' .. node.b.get_source().uid(),
					d    = 'r' .. node.d.uid()
				}
				if type == 'float' or type == 'half' or type == 'float4' or type == 'float3' or type == 'half3' or type == 'float2' or type == 'half2' then
					return (('type d = lerp( b, a, type( x > y ) );'):gsub('[%w_]+', s))
				else
					return (('type d = ( type( x > y ) * a ) + ( type( !( x > y ) ) * b );'):gsub('[%w_]+', s))
				end
			]]></code>
		</code-generation>
	</node>
	<node type="Select Greater Than Equal">
		<description><![CDATA[d = if ( x >= y ) then a else b

			Supported Types:

			float
			half
			fixed
			int
			float4
			half4
			fixed4
			int4
			float3
			half3
			fixed3
			int3
			float2
			half2
			fixed2
			int2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="a">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="b">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<output name="d">
				<get-type method="same-as" target="*">a</get-type>
			</output>
			<input-constraints method="lua" target="*">
				return node.x.get_type() == node.y.get_type() and node.a.get_type() == node.b.get_type()
			</input-constraints>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					type = node.d.get_type(),
					x    = 'r' .. node.x.get_source().uid(),
					y    = 'r' .. node.y.get_source().uid(),
					a    = 'r' .. node.a.get_source().uid(),
					b    = 'r' .. node.b.get_source().uid(),
					d    = 'r' .. node.d.uid()
				}
				if type == 'float' or type == 'half' or type == 'float4' or type == 'float3' or type == 'half3' or type == 'float2' or type == 'half2' then
					return (('type d = lerp( b, a, type( x >= y ) );'):gsub('[%w_]+', s))
				else
					return (('type d = ( type( x >= y ) * a ) + ( type( !( x >= y ) ) * b );'):gsub('[%w_]+', s))
				end
			]]></code>
		</code-generation>
	</node>
	<node type="Select Less Than Equal">
		<description><![CDATA[d = if ( x <= y ) then a else b

			Supported Types:

			float
			half
			fixed
			int
			float4
			half4
			fixed4
			int4
			float3
			half3
			fixed3
			int3
			float2
			half2
			fixed2
			int2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="a">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="b">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<output name="d">
				<get-type method="same-as" target="*">a</get-type>
			</output>
			<input-constraints method="lua" target="*">
				return node.x.get_type() == node.y.get_type() and node.a.get_type() == node.b.get_type()
			</input-constraints>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					type = node.d.get_type(),
					x    = 'r' .. node.x.get_source().uid(),
					y    = 'r' .. node.y.get_source().uid(),
					a    = 'r' .. node.a.get_source().uid(),
					b    = 'r' .. node.b.get_source().uid(),
					d    = 'r' .. node.d.uid()
				}
				if type == 'float' or type == 'half' or type == 'float4' or type == 'float3' or type == 'half3' or type == 'float2' or type == 'half2' then
					return (('type d = lerp( b, a, type( x <= y ) );'):gsub('[%w_]+', s))
				else
					return (('type d = ( type( x <= y ) * a ) + ( type( !( x <= y ) ) * b );'):gsub('[%w_]+', s))
				end
			]]></code>
		</code-generation>
	</node>
	<node type="Select Equal">
		<description><![CDATA[d = if ( x == y ) then a else b

			Supported Types:

			float
			half
			fixed
			int
			float4
			half4
			fixed4
			int4
			float3
			half3
			fixed3
			int3
			float2
			half2
			fixed2
			int2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="a">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="b">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<output name="d">
				<get-type method="same-as" target="*">a</get-type>
			</output>
			<input-constraints method="lua" target="*">
				return node.x.get_type() == node.y.get_type() and node.a.get_type() == node.b.get_type()
			</input-constraints>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					type = node.d.get_type(),
					x    = 'r' .. node.x.get_source().uid(),
					y    = 'r' .. node.y.get_source().uid(),
					a    = 'r' .. node.a.get_source().uid(),
					b    = 'r' .. node.b.get_source().uid(),
					d    = 'r' .. node.d.uid()
				}
				if type == 'float' or type == 'half' or type == 'float4' or type == 'float3' or type == 'half3' or type == 'float2' or type == 'half2' then
					return (('type d = lerp( b, a, type( x == y ) );'):gsub('[%w_]+', s))
				else
					return (('type d = ( type( x == y ) * a ) + ( type( !( x == y ) ) * b );'):gsub('[%w_]+', s))
				end
			]]></code>
		</code-generation>
	</node>
	<node type="Select Not Equal">
		<description><![CDATA[d = if ( x != y ) then a else b

			Supported Types:

			float
			half
			fixed
			int
			float4
			half4
			fixed4
			int4
			float3
			half3
			fixed3
			int3
			float2
			half2
			fixed2
			int2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="a">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<input name="b">
				<check-type method="list" target="*">
					float,half,fixed,int,float4,half4,fixed4,int4,float3,half3,fixed3,int3,float2,half2,fixed2,int2
				</check-type>
			</input>
			<output name="d">
				<get-type method="same-as" target="*">a</get-type>
			</output>
			<input-constraints method="lua" target="*">
				return node.x.get_type() == node.y.get_type() and node.a.get_type() == node.b.get_type()
			</input-constraints>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					type = node.d.get_type(),
					x    = 'r' .. node.x.get_source().uid(),
					y    = 'r' .. node.y.get_source().uid(),
					a    = 'r' .. node.a.get_source().uid(),
					b    = 'r' .. node.b.get_source().uid(),
					d    = 'r' .. node.d.uid()
				}
				if type == 'float' or type == 'half' or type == 'float4' or type == 'float3' or type == 'half3' or type == 'float2' or type == 'half2' then
					return (('type d = lerp( b, a, type( x != y ) );'):gsub('[%w_]+', s))
				else
					return (('type d = ( type( x != y ) * a ) + ( type( !( x != y ) ) * b );'):gsub('[%w_]+', s))
				end
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Less Than">
		<description><![CDATA[d = if ( x < y ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
			<input-constraints method="equal" target="*"/>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) < ${node.type_ndx.get_value()}(r${node.y.get_source().uid()});
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Greater Than">
		<description><![CDATA[d = if ( x > y ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
			<input-constraints method="equal" target="*"/>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) > ${node.type_ndx.get_value()}(r${node.y.get_source().uid()});
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Greater Than Equal">
		<description><![CDATA[d = if ( x >= y ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
			<input-constraints method="equal" target="*"/>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) >= ${node.type_ndx.get_value()}(r${node.y.get_source().uid()});
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Less Than Equal">
		<description><![CDATA[d = if ( x <= y ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
			<input-constraints method="equal" target="*"/>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) <= ${node.type_ndx.get_value()}(r${node.y.get_source().uid()});
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Equal">
		<description><![CDATA[d = if ( x == y ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
			<input-constraints method="equal" target="*"/>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) == ${node.type_ndx.get_value()}(r${node.y.get_source().uid()});
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Not Equal">
		<description><![CDATA[d = if ( x != y ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<input name="y">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
			<input-constraints method="equal" target="*"/>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) != ${node.type_ndx.get_value()}(r${node.y.get_source().uid()});
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Less Than Zero">
		<description><![CDATA[d = if ( x < 0 ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) < ${node.x.get_source().get_type()}(0);
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Greater Than Zero">
		<description><![CDATA[d = if ( x > 0 ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) > ${node.x.get_source().get_type()}(0);
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Greater Than Equal Zero">
		<description><![CDATA[d = if ( x >= 0 ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) >= ${node.x.get_source().get_type()}(0);
			]]></code>
		</code-generation>
	</node>
	<node type="Compare Less Than Equal Zero">
		<description><![CDATA[d = if ( x <= 0 ) then (1) else (0)

			Supported Types:

			float
			half
			fixed
			int
			bool
			float4
			half4
			fixed4
			int4
			bool4
			float3
			half3
			fixed3
			int3
			bool3
			float2
			half2
			fixed2
			int2
			bool2
		]]></description>
		<ports>
			<input name="x">
				<check-type method="list" target="*">
					float,half,fixed,int,bool,float4,half4,fixed4,int4,bool4,float3,half3,fixed3,int3,bool3,float2,half2,fixed2,int2,bool2
				</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>
					<option>fixed</option>
					<option>int</option>
					<option>bool</option>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				${node.type_ndx.get_value()} r${node.d.uid()} = ${node.type_ndx.get_value()}(r${node.x.get_source().uid()}) <= ${node.x.get_source().get_type()}(0);
			]]></code>
		</code-generation>
	</node>
</library>
