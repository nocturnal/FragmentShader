<?xml version="1.0"?>
<library path="CustomIGShader/CustomIGShaderMisc">
	<node type="[IN] (sampler2D) Texture Sampler (custom_map_a)">
		<description>Access textures (base_map)</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">sampler2D</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="choice_ndx" type="list">
				<options>
					<option>custom_map_a</option>
					<option>custom_map_b</option>
					<option>base_map</option>
					<option>normal_map</option>
					<option>r2o_normal_coarse</option>
					<option>r2o_normal_fine</option>
				</options>
				<on-changed>node.Name.set_value('[IN] (sampler2D) Texture Sampler (' .. node.choice_ndx.get_value() .. ')')</on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} ${node.choice_ndx.get_value()}
			</code>
		</code-generation>
	</node>
	<node type="[IN] (float3) View Vector">
		<description>View Vector</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float3</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} float3(view.xyz)
			</code>
		</code-generation>
	</node>
	<node type="[IN] (float3) Normal Vector">
		<description>Normal Vector</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float3</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} float3(normal.xyz)
			</code>
		</code-generation>
	</node>

	<node type="[IN] (float) Diffuse Luminance">
		<description>Input Gloss</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} dl_luminance
			</code>
		</code-generation>
	</node>

	<node type="[IN] (float) Input Gloss">
		<description>Input Gloss</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} input_gloss
			</code>
		</code-generation>
	</node>

	<node type="[IN] (float3) Input Base Color">
		<description>Input base color</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float3</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} input_base_color
			</code>
		</code-generation>
	</node>
	
	<node type="[IN] (float4) Custom User Color (packed)">
		<description>Input base color</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} g_graphshader_consts_user2
			</code>
		</code-generation>
	</node>

	<node type="[IN] (float4) Instance Float Randoms">
		<description>Random float numbers in the 0 to 1 range generated per-instance in the xy, random floats per frame in the zw</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} instance_random_floats
			</code>
		</code-generation>
	</node>
	
	<node type="[IN] (float4) Input vertex_color">
		<description>Input vertex color</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} input.GetBaseTint()
			</code>
		</code-generation>
	</node>
	<node type="[IN] (float4) Screen Position">
		<description>Input Screen Position</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} wpos
			</code>
		</code-generation>
	</node>
	<node type="[IN] (float) Input Base Alpha">
		<description>Input base alpha</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} input_base_alpha
			</code>
		</code-generation>
	</node>
	<node type="[IN] (float2) Input Base UV">
		<description>Input base uv</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float2</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} input_base_uv
			</code>
		</code-generation>
	</node>
	<node type="[IN] (float) Input Incandescent">
		<description>Input Incandescent</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} input_incandescent
			</code>
		</code-generation>
	</node>
	<node type="[IN] (float) Time (Seconds)">
		<description>Time, in seconds</description>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} time
			</code>
		</code-generation>
	</node>
	<node type="[OUT] (float) Output Gloss">
		<description>Output Gloss</description>
		<ports>
			<input name="a">
				<check-type method="fixed" target="*">float</check-type>
			</input>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				output_gloss = r${node.a.get_source().uid()};
			</code>
		</code-generation>
	</node>
	<node type="[OUT] (float3) Output Base Color">
		<description>Output Base Color</description>
		<ports>
			<input name="rgb">
				<check-type method="fixed" target="*">float3</check-type>
			</input>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				output_base_color = r${node.rgb.get_source().uid()};
			</code>
		</code-generation>
	</node>
	<node type="[OUT] (float) Output Base Alpha">
		<description>Output Base Alpha</description>
		<ports>
			<input name="a">
				<check-type method="fixed" target="*">float</check-type>
			</input>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				output_base_alpha = r${node.a.get_source().uid()};
			</code>
		</code-generation>
	</node>
	<node type="[OUT] (float) Output Incandescent">
		<description>Output Incandescent</description>
		<ports>
			<input name="a">
				<check-type method="fixed" target="*">float</check-type>
			</input>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				output_incandescent = r${node.a.get_source().uid()};
			</code>
		</code-generation>
	</node>
	<node type="[OUT] (float) Output Lighting">
		<description>Output Lighing</description>
		<ports>
			<input name="a">
				<check-type method="fixed" target="*">float</check-type>
			</input>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				if ( r${node.a.get_source().uid()} <= 0.0f )
				{
					diffuse_light.rgb = 1.0f;
					prelight.rgb      = 0.0f;
				}
			]]></code>
		</code-generation>
	</node>
	<node type="[IN] (float4) Screen Buffer Sample (frame)">
		<description>Output Lighing</description>
		<ports>
			<input name="offset">
				<check-type method="list" target="*">float2,half2</check-type>
			</input>
			<output name="rgba">
				<get-type method="lua" target="*">return node.offset.get_type():sub(1, -2) .. '4'</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="choice_ndx" type="list">
				<options>
					<option>frame</option>
					<option>depth</option>
					<option>frame_hq</option>
					<option>depth_hq</option>
				</options>
				<on-changed>node.Name.set_value('[IN] (float4) Screen Buffer Sample (' .. node.choice_ndx.get_value() .. ')')</on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local subs = {
					offset_hex = 'r' .. node.offset.get_source().uid(),
					output_hex = 'r' .. node.rgba.uid(),
					buffer_type = node.choice_ndx.get_value(),
					buffer_type_buffer = node.choice_ndx.get_value() .. '_buffer'
				}
				local pat = [[
					float4 output_hex;
					{
						output_hex = tex2D( buffer_type_buffer, ( ( wpos.xy * screen_buffer_const.xy ) + offset_hex ) );
				]]
				if subs.buffer_type == 'depth' or subs.buffer_type == 'depth_hq' then
					pat = pat .. [[
						float linear_depth = 1.0f / dot( output_hex, linear_depth_const );
						output_hex = float4( linear_depth );
					]]
				end
				pat = pat .. [[
					}
				]]
				return (pat:gsub('[%w_]+', subs))
			]]></code>
			<!--
				local offset_hex    = 'r' .. self.offset.get_output().hex()
				local output_hex    = 'r' .. self.output.hex()
				local buffer_type   = self.choices[self.choice_ndx]

				out.write( '\tfloat4 ' .. output_hex .. '; \n' )
				out.write( '\t{\n' )
				out.write( '\t\t#define offset_   ' .. offset_hex .. '					\n' )
				out.write( '\t\t#define sampler_  ' .. buffer_type .. '_buffer	\n' )
				out.write( '\t\t#define offset_uvs_ ((wpos.xy * screen_buffer_const.xy) + offset_)	\n' )
				out.write( '\t\t' .. output_hex .. ' = tex2D( sampler_ , offset_uvs_ ); 		\n' )
				if((buffer_type == 'depth') or (buffer_type == 'depth_hq')) then
					out.write( '\t\tfloat linear_depth = 1.0f/dot(' .. output_hex .. ', linear_depth_const); \n')
					out.write( '\t\t' .. output_hex .. ' = float4(linear_depth); 				 \n')
				end
				out.write( '\t}\n' )
			-->
		</code-generation>
	</node>
	
	<node type="[IN] (float4) Custom Input 1">
		<description>Input base color</description>
		<tool-tip>Input base color</tool-tip>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} g_graphshader_custom_input_1
			</code>
		</code-generation>
	</node>
	<node type="[IN] (float4) Custom Input 2">
		<description>Input base color</description>
		<tool-tip>Input base color</tool-tip>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} g_graphshader_custom_input_2
			</code>
		</code-generation>
	</node>
	<node type="[IN] (float3) Input Diffuse Lighting">
		<description>Input Diffuse Lighting</description>
		<tool-tip>Input Diffuse Lighting</tool-tip>
		<ports>
			<output name="d">
				<get-type method="fixed" target="*">float3</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} input_diffuse_lighting
			</code>
		</code-generation>
	</node>
	<node type="[OUT] (float3) Output Diffuse Lighting">
		<description>Output Diffuse Lighting</description>
		<tool-tip>Output Diffuse Lighting</tool-tip>
		<ports>
			<input name="a">
				<check-type method="fixed" target="*">float3</check-type>
			</input>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				output_diffuse_lighting = r${node.a.get_source().uid()};
			</code>
		</code-generation>
	</node>
	<node type="[OUT] (float3) Output Gloss Custom Tint">
		<description>Output Gloss Custom Tint</description>
		<tool-tip>Output Gloss Custom Tint</tool-tip>
		<ports>
			<input name="a">
				<check-type method="fixed" target="*">float3</check-type>
			</input>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				output_gloss_custom_tint = r${node.a.get_source().uid()};
			</code>
		</code-generation>
	</node>
	<node type="[OUT] (float) Output Lighting">
		<description>Output Lighting</description>
		<tool-tip>Output Lighting</tool-tip>
		<ports>
			<input name="a">
				<check-type method="fixed" target="*">float</check-type>
			</input>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*"><![CDATA[
				float use_lighting = r${node.a.get_source().uid()};
				if (use_lighting <= 0.0f)
				{
					diffuse_light.rgb = 1.0f;
					sun_light.rgb     = 0.0f;
					prelight.rgb      = 0.0f;
				}
			]]></code>
		</code-generation>
	</node>
</library>
