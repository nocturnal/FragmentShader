<?xml version="1.0"?>
<library path="Cg/Lighting Functions">
	<node type="Blinn-Phong Specular">
		<description><![CDATA[d = pow(saturate(dot(normal,normalize(light+view)), mat_power)
		
		Supported Types:
		
		float4
		half4
		fixed4
		float3
		half3
		fixed3
		float2
		half2
		fixed2]]></description>
		<tool-tip>d = pow(saturate(dot(normal,normalize(light+view)), mat_power)</tool-tip>
		<ports>
			<input name="N" required="true">
				<check-type method="list" target="*">float4,half4,fixed4,float3,half3,fixed3,float2,half2,fixed2</check-type>
			</input>
			<input name="L" required="true">
				<check-type method="list" target="*">float4,half4,fixed4,float3,half3,fixed3,float2,half2,fixed2</check-type>
			</input>
			<input name="V">
				<check-type method="list" target="*">float4,half4,fixed4,float3,half3,fixed3,float2,half2,fixed2</check-type>
			</input>
			<input name="Cpow">
				<check-type method="list" target="*">float4,half4,fixed4,float3,half3,fixed3,float2,half2,fixed2</check-type>
			</input>
			<output name="Cspec">
				<get-type method="lua" target="*">return node.N.get_type():sub(1, -2)</get-type>
			</output>
			<input-constraints method="lua" target="*"><![CDATA[
				local n = node.N.get_type()
				local l = node.L.get_type()
				local v = node.V.get_type()
				return n == l and l == v
			]]></input-constraints>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local sub = {
					normal      = 'r' .. node.N.get_source().hex()
					light       = 'r' .. node.L.get_source().hex()
					view        = 'r' .. node.V.get_source().hex()
					-- Cast mat_power to in_normal's type
					t_mat_power = node.N.get_type()
					mat_power   = 'r' .. node.Cpow.get_source().hex()
					t_d0        = node.N.get_type()
					d0          = 'r' .. node.Cspec.hex() .. '_norm'
					t_d         = node.Cspec.get_type()
					d           = 'r' .. node.Cspec.hex()
				}

				return
					(('t_d0 d0 = normalize(light + view);\n' ..
					't_d d = pow(saturate(dot(normal, d0)), t_mat_power(mat_power));'):gsub('[%w_]+', sub))
			]]></code>
		</code-generation>
	</node>
	<node type="Lambert Diffuse">
		<description><![CDATA[d = saturate(dot(normal,light))
		
		Supported Types:
		
		float4
		half4
		fixed4
		float3
		half3
		fixed3
		float2
		half2
		fixed2]]></description>
		<tool-tip>d = saturate(dot(normal,light))</tool-tip>
		<ports>
			<input name="N" required="true">
				<check-type method="list" target="*">float4,half4,fixed4,float3,half3,fixed3,float2,half2,fixed2</check-type>
			</input>
			<input name="L" required="true">
				<check-type method="list" target="*">float4,half4,fixed4,float3,half3,fixed3,float2,half2,fixed2</check-type>
			</input>
			<output name="Cdiff">
				<get-type method="lua" target="*">return node.N.get_type():sub(1, -2)</get-type>
			</output>
			<input-constraints method="equal" target="*"/>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				${node.Cdiff.get_type()} r${node.Cdiff.uid()} = saturate( dot( ${node.N.get_source().uid()}, ${node.L.get_source().uid()} ) );
			</code>
		</code-generation>
	</node>
</library>
