<?xml version="1.0"?>
<library path="Cg/Misc">
	<node type="Copy, Split">
		<description>TODO</description>
		<tool-tip>(x,y) = d</tool-tip>
		<ports>
			<input name="a" required="true">
				<check-type method="any" target="*"/>
			</input>
			<output name="x">
				<get-type method="same-as" target="*">a</get-type>
			</output>
			<output name="y">
				<get-type method="same-as" target="*">a</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				${node.x.get_type()} r${node.x.uid()} = r${node.a.get_source().uid()};
				${node.y.get_type()} r${node.y.uid()} = r${node.a.get_source().uid()};
			</code>
		</code-generation>
	</node>
	<node type="Name">
		<description>TODO</description>
		<tool-tip>x = d</tool-tip>
		<ports>
			<input name="a" required="true">
				<check-type method="any" target="*"/>
			</input>
			<output name="x">
				<get-type method="same-as" target="*">a</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.x.uid()} r${node.a.get_source().uid()}
			</code>
		</code-generation>
	</node>
	<node type="Constant, User (Splat)">
		<description>TODO</description>
		<tool-tip>Set scalar or splat vector to user value</tool-tip>
		<ports>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>  
					<option>fixed</option>  
					<option>int</option>  
					<option>bool</option>  
					<option>float4</option>  
					<option>half4</option>  
					<option>fixed4</option>  
					<option>int4</option>  
					<option>bool4</option>  
					<option>float3</option>  
					<option>half3</option>  
					<option>fixed3</option>  
					<option>int3</option>  
					<option>bool3</option>  
					<option>float2</option>  
					<option>half2</option>  
					<option>fixed2</option>  
					<option>int2</option>  
					<option>bool2</option>  
					<option>float4x4</option>  
					<option>half4x4</option>  
					<option>fixed4x4</option>  
					<option>int4x4</option>  
					<option>bool4x4</option>  
					<option>float4x3</option>  
					<option>half4x3</option>  
					<option>fixed4x3</option>  
					<option>int4x3</option>  
					<option>bool4x3</option>  
					<option>float4x2</option>  
					<option>half4x2</option>  
					<option>fixed4x2</option>  
					<option>int4x2</option>  
					<option>bool4x2</option>  
					<option>float3x4</option>  
					<option>half3x4</option>  
					<option>fixed3x4</option>  
					<option>int3x4</option>  
					<option>bool3x4</option>  
					<option>float3x3</option>  
					<option>half3x3</option>  
					<option>fixed3x3</option>  
					<option>int3x3</option>  
					<option>bool3x3</option>  
					<option>float3x2</option>  
					<option>half3x2</option>  
					<option>fixed3x2</option>  
					<option>int3x2</option>  
					<option>bool3x2</option>  
					<option>float2x4</option>  
					<option>half2x4</option>  
					<option>fixed2x4</option>  
					<option>int2x4</option>  
					<option>bool2x4</option>  
					<option>float2x3</option>  
					<option>half2x3</option>  
					<option>fixed2x3</option>  
					<option>int2x3</option>  
					<option>bool2x3</option>  
					<option>float2x2</option>  
					<option>half2x2</option>  
					<option>fixed2x2</option>  
					<option>int2x2</option>  
					<option>bool2x2</option>
				</options>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value.get_value() .. ')')</on-changed>
			</property>
			<property name="value" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value.get_value() .. ')')</on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} ${node.type_ndx.get_value()}( ${math.evaluate(node.value.get_value())} )
			</code>
		</code-generation>
	</node>
	<node type="Constant, User (Vector2)">
		<description>TODO</description>
		<tool-tip>Set vector2 to user value</tool-tip>
		<ports>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="type_ndx" type="list">
				<options>
					<option>float2</option>
					<option>half2</option>
					<option>fixed2</option>
					<option>int2</option>
					<option>bool2</option>
				</options>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ')')</on-changed>
			</property>
			<property name="Value (0)" id="value_0" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ')')</on-changed>
			</property>
			<property name="Value (1)" id="value_1" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ')')</on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} ${node.type_ndx.get_value()}( ${math.evaluate(node.value_0.get_value())}, ${math.evaluate(node.value_1.get_value())} )
			</code>
		</code-generation>
	</node>
	<node type="Constant, User (Vector3)">
		<description>TODO</description>
		<tool-tip>Set vector3 to user value</tool-tip>
		<ports>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="Type" id="type_ndx" type="list">
				<options>
					<option>float3</option>
					<option>half3</option>
					<option>fixed3</option>
					<option>int3</option>
					<option>bool3</option>
				</options>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ',' .. node.value_2.get_value() .. ')')</on-changed>
			</property>
			<property name="Value (0)" id="value_0" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ',' .. node.value_2.get_value() .. ')')</on-changed>
			</property>
			<property name="Value (1)" id="value_1" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ',' .. node.value_2.get_value() .. ')')</on-changed>
			</property>
			<property name="Value (2)" id="value_2" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ',' .. node.value_2.get_value() .. ')')</on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} ${node.type_ndx.get_value()}( ${math.evaluate(node.value_0.get_value())}, ${math.evaluate(node.value_1.get_value())}, ${math.evaluate(node.value_2.get_value())} )
			</code>
		</code-generation>
	</node>
	<node type="Constant, User (Vector4)">
		<description>TODO</description>
		<tool-tip>Set vector4 to user value</tool-tip>
		<ports>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="Type" id="type_ndx" type="list">
				<options>
					<option>float4</option>
					<option>half4</option>
					<option>fixed4</option>
					<option>int4</option>
					<option>bool4</option>
				</options>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ',' .. node.value_2.get_value() .. ',' .. node.value_3.get_value() .. ')')</on-changed>
			</property>
			<property name="Value (0)" id="value_0" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ',' .. node.value_2.get_value() .. ',' .. node.value_3.get_value() .. ')')</on-changed>
			</property>
			<property name="Value (1)" id="value_1" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ',' .. node.value_2.get_value() .. ',' .. node.value_3.get_value() .. ')')</on-changed>
			</property>
			<property name="Value (2)" id="value_2" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ',' .. node.value_2.get_value() .. ',' .. node.value_3.get_value() .. ')')</on-changed>
			</property>
			<property name="Value (3)" id="value_3" type="text">
				<value>0</value>
				<on-changed>node.Name.set_value(node.type_ndx.get_value() .. '(' .. node.value_0.get_value() .. ',' .. node.value_1.get_value() .. ',' .. node.value_2.get_value() .. ',' .. node.value_3.get_value() .. ')')</on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} ${node.type_ndx.get_value()}( ${math.evaluate(node.value_0.get_value())}, ${math.evaluate(node.value_1.get_value())}, ${math.evaluate(node.value_2.get_value())}, ${math.evaluate(node.value_3.get_value())} )
			</code>
		</code-generation>
	</node>
	<node type="Static Cast">
		<description>TODO</description>
		<tool-tip>#define d Type(a)</tool-tip>
		<ports>
			<input name="a">
				<check-type method="any" target="*"/>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.Type.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="Type" id="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>  
					<option>fixed</option>  
					<option>int</option>  
					<option>bool</option>  
					<option>float4</option>  
					<option>half4</option>  
					<option>fixed4</option>  
					<option>int4</option>  
					<option>bool4</option>  
					<option>float3</option>  
					<option>half3</option>  
					<option>fixed3</option>  
					<option>int3</option>  
					<option>bool3</option>  
					<option>float2</option>  
					<option>half2</option>  
					<option>fixed2</option>  
					<option>int2</option>  
					<option>bool2</option>  
					<option>float4x4</option>  
					<option>half4x4</option>  
					<option>fixed4x4</option>  
					<option>int4x4</option>  
					<option>bool4x4</option>  
					<option>float4x3</option>  
					<option>half4x3</option>  
					<option>fixed4x3</option>  
					<option>int4x3</option>  
					<option>bool4x3</option>  
					<option>float4x2</option>  
					<option>half4x2</option>  
					<option>fixed4x2</option>  
					<option>int4x2</option>  
					<option>bool4x2</option>  
					<option>float3x4</option>  
					<option>half3x4</option>  
					<option>fixed3x4</option>  
					<option>int3x4</option>  
					<option>bool3x4</option>  
					<option>float3x3</option>  
					<option>half3x3</option>  
					<option>fixed3x3</option>  
					<option>int3x3</option>  
					<option>bool3x3</option>  
					<option>float3x2</option>  
					<option>half3x2</option>  
					<option>fixed3x2</option>  
					<option>int3x2</option>  
					<option>bool3x2</option>  
					<option>float2x4</option>  
					<option>half2x4</option>  
					<option>fixed2x4</option>  
					<option>int2x4</option>  
					<option>bool2x4</option>  
					<option>float2x3</option>  
					<option>half2x3</option>  
					<option>fixed2x3</option>  
					<option>int2x3</option>  
					<option>bool2x3</option>  
					<option>float2x2</option>  
					<option>half2x2</option>  
					<option>fixed2x2</option>  
					<option>int2x2</option>  
					<option>bool2x2</option>
				</options>
				<on-changed>node.Name.set_value('Static Cast (' .. node.type_ndx.get_value() .. ')')</on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} ${node.type_ndx.get_value()}( ${node.a.get_source().uid()} )
			</code>
		</code-generation>
	</node>
	<node type="Static Cast (force lvalue)">
		<description>TODO</description>
		<tool-tip>Type d = Type(a);</tool-tip>
		<ports>
			<input name="a">
				<check-type method="any" target="*"/>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.Type.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="Type" id="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>  
					<option>fixed</option>  
					<option>int</option>  
					<option>bool</option>  
					<option>float4</option>  
					<option>half4</option>  
					<option>fixed4</option>  
					<option>int4</option>  
					<option>bool4</option>  
					<option>float3</option>  
					<option>half3</option>  
					<option>fixed3</option>  
					<option>int3</option>  
					<option>bool3</option>  
					<option>float2</option>  
					<option>half2</option>  
					<option>fixed2</option>  
					<option>int2</option>  
					<option>bool2</option>  
					<option>float4x4</option>  
					<option>half4x4</option>  
					<option>fixed4x4</option>  
					<option>int4x4</option>  
					<option>bool4x4</option>  
					<option>float4x3</option>  
					<option>half4x3</option>  
					<option>fixed4x3</option>  
					<option>int4x3</option>  
					<option>bool4x3</option>  
					<option>float4x2</option>  
					<option>half4x2</option>  
					<option>fixed4x2</option>  
					<option>int4x2</option>  
					<option>bool4x2</option>  
					<option>float3x4</option>  
					<option>half3x4</option>  
					<option>fixed3x4</option>  
					<option>int3x4</option>  
					<option>bool3x4</option>  
					<option>float3x3</option>  
					<option>half3x3</option>  
					<option>fixed3x3</option>  
					<option>int3x3</option>  
					<option>bool3x3</option>  
					<option>float3x2</option>  
					<option>half3x2</option>  
					<option>fixed3x2</option>  
					<option>int3x2</option>  
					<option>bool3x2</option>  
					<option>float2x4</option>  
					<option>half2x4</option>  
					<option>fixed2x4</option>  
					<option>int2x4</option>  
					<option>bool2x4</option>  
					<option>float2x3</option>  
					<option>half2x3</option>  
					<option>fixed2x3</option>  
					<option>int2x3</option>  
					<option>bool2x3</option>  
					<option>float2x2</option>  
					<option>half2x2</option>  
					<option>fixed2x2</option>  
					<option>int2x2</option>  
					<option>bool2x2</option>
				</options>
				<on-changed>node.Name.set_value('Static Cast (force lvalue) (' .. node.type_ndx.get_value() .. ')')</on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				${node.d.get_type()} r${node.d.uid()} = ${node.Type.get_value()}( r${node.a.get_source().uid()} );
			</code>
		</code-generation>
	</node>
	<node type="Constant, Common Math (Splat)">
		<description>TODO</description>
		<tool-tip>d = choice among common math constants</tool-tip>
		<ports>
			<output name="d">
				<get-type method="lua" target="*">return node.type_ndx.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="Type" id="type_ndx" type="list">
				<options>
					<option>float</option>
					<option>half</option>  
					<option>fixed</option>  
					<option>int</option>  
					<option>bool</option>  
					<option>float4</option>  
					<option>half4</option>  
					<option>fixed4</option>  
					<option>int4</option>  
					<option>bool4</option>  
					<option>float3</option>  
					<option>half3</option>  
					<option>fixed3</option>  
					<option>int3</option>  
					<option>bool3</option>  
					<option>float2</option>  
					<option>half2</option>  
					<option>fixed2</option>  
					<option>int2</option>  
					<option>bool2</option>  
					<option>float4x4</option>  
					<option>half4x4</option>  
					<option>fixed4x4</option>  
					<option>int4x4</option>  
					<option>bool4x4</option>  
					<option>float4x3</option>  
					<option>half4x3</option>  
					<option>fixed4x3</option>  
					<option>int4x3</option>  
					<option>bool4x3</option>  
					<option>float4x2</option>  
					<option>half4x2</option>  
					<option>fixed4x2</option>  
					<option>int4x2</option>  
					<option>bool4x2</option>  
					<option>float3x4</option>  
					<option>half3x4</option>  
					<option>fixed3x4</option>  
					<option>int3x4</option>  
					<option>bool3x4</option>  
					<option>float3x3</option>  
					<option>half3x3</option>  
					<option>fixed3x3</option>  
					<option>int3x3</option>  
					<option>bool3x3</option>  
					<option>float3x2</option>  
					<option>half3x2</option>  
					<option>fixed3x2</option>  
					<option>int3x2</option>  
					<option>bool3x2</option>  
					<option>float2x4</option>  
					<option>half2x4</option>  
					<option>fixed2x4</option>  
					<option>int2x4</option>  
					<option>bool2x4</option>  
					<option>float2x3</option>  
					<option>half2x3</option>  
					<option>fixed2x3</option>  
					<option>int2x3</option>  
					<option>bool2x3</option>  
					<option>float2x2</option>  
					<option>half2x2</option>  
					<option>fixed2x2</option>  
					<option>int2x2</option>  
					<option>bool2x2</option>
				</options>
				<on-changed>node.Name.set_value('(' .. node.type_ndx.get_value() .. ') ' .. node.value_ndx.get_value())</on-changed>
			</property>
			<property name="Value" id="value_ndx" type="list">
				<options>
					<option value="2.71828182845904523540">M_E (e)</option>
					<option value="1.44269504088896340740">M_LOG2E (log_2 e)</option>
					<option value="0.43429448190325182765">M_LOG10E (log_10 e)</option>
					<option value="0.69314718055994530942">M_LN2 (log_e 2)</option>
					<option value="2.30258509299404568402">M_LN10 (log_e 10)</option>
					<option value="3.14159265358979323846">M_PI (pi)</option>
					<option value="6.28318530717958647692">M_2XPI (2*pi)</option>
					<option value="1.57079632679489661923">M_PI_2 (pi/2)</option>
					<option value="0.78539816339744830962">M_PI_4 (pi/4)</option>
					<option value="0.31830988618379067154">M_1_PI (1/pi)</option>
					<option value="0.63661977236758134308">M_2_PI (2/pi)</option>
					<option value="1.12837916709551257390">M_2_SQRTPI (2/sqrt(pi))</option>
					<option value="1.41421356237309504880">M_SQRT2 (sqrt(2))</option>
					<option value="0.70710678118654752440">M_SQRT1_2 (1/sqrt(2))</option>
					<option value="0.00000000000000000000">M_ZERO (0.0)</option>
					<option value="1.00000000000000000000">M_ONE (1.0)</option>
					<option value="2.00000000000000000000">M_TWO (2.0)</option>
					<option value="0.50000000000000000000">M_PT_FIVE (0.5)</option>
					<option value="0.25000000000000000000">M_PT_TWOFIVE (0.25)</option>
				</options>
				<on-changed>node.Name.set_value('(' .. node.type_ndx.get_value() .. ') ' .. node.value_ndx.get_value())</on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">
				#define r${node.d.uid()} ${node.type_ndx.get_value()}( ${node.value_ndx.get_value()} )
			</code>
		</code-generation>
	</node>
	<node type="Unused Value">
		<description>Mark value as unused - i.e. not using the input value is not an error.</description>
		<tool-tip>Mark (a) as unused</tool-tip>
		<ports>
			<input name="a">
				<check-type method="any" target="*"/>
			</input>
		</ports>
		<code-generation>
			<code method="fixed" target="*"/>
		</code-generation>
	</node>
	<node type="Convert float3 to float4">
		<description>TODO</description>
		<tool-tip>x = float4( a.x, a.y, a.z, w )</tool-tip>
		<ports>
			<input name="a">
				<check-type method="list" target="*">float3</check-type>
			</input>
			<output name="x">
				<get-type method="fixed" target="*">float4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="w" type="text"/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					x = 'r' .. node.x.uid(),
					a = 'r' .. node.a.get_source().uid(),
					w = math.evaluate(node.w.get_value())
				}
				return (('#define x float4( a.x, a.y, a.z, float( w ) )'):gsub('[%w_]+', s))
			]]></code>
		</code-generation>
	</node>
	<node type="Convert float2 to float3">
		<description>TODO</description>
		<tool-tip>x = float3( a.x, a.y, z )</tool-tip>
		<ports>
			<input name="a">
				<check-type method="list" target="*">float2</check-type>
			</input>
			<output name="x">
				<get-type method="fixed" target="*">float3</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="z" type="double"/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					x = 'r' .. node.x.uid(),
					a = 'r' .. node.a.get_source().uid(),
					z = math.evaluate(node.z.get_value())
				}
				return (('#define x float3( a.x, a.y, float( z ) )'):gsub('[%w_]+', s))
			]]></code>
		</code-generation>
	</node>
	<node type="Convert float2 to float4">
		<description>TODO</description>
		<tool-tip>x = float4( a.x, a.y, z, w )</tool-tip>
		<ports>
			<input name="a">
				<check-type method="list" target="*">float2</check-type>
			</input>
			<output name="x">
				<get-type method="fixed" target="*">float4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="z" type="double"/>
			<property name="w" type="double"/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					x = 'r' .. node.x.uid(),
					a = 'r' .. node.a.get_source().uid(),
					z = math.evaluate(node.z.get_value()),
					w = math.evaluate(node.w.get_value())
				}
				return (('#define x float4( a.x, a.y, float( z ), float( w ) )'):gsub('[%w_]+', s))
			]]></code>
		</code-generation>
	</node>
	<node type="Convert half3 to half4">
		<description>TODO</description>
		<tool-tip>x = half4( a.x, a.y, a.z, w )</tool-tip>
		<ports>
			<input name="a">
				<check-type method="list" target="*">half3</check-type>
			</input>
			<output name="x">
				<get-type method="fixed" target="*">half4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="w" type="double"/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					x = 'r' .. node.x.uid(),
					a = 'r' .. node.a.get_source().uid(),
					w = math.evaluate(node.w.get_value())
				}
				return (('#define x half4( a.x, a.y, a.z, half( w ) )'):gsub('[%w_]+', s))
			]]></code>
		</code-generation>
	</node>
	<node type="Convert half2 to half3">
		<description>TODO</description>
		<tool-tip>x = half3( a.x, a.y, z )</tool-tip>
		<ports>
			<input name="a">
				<check-type method="list" target="*">half2</check-type>
			</input>
			<output name="x">
				<get-type method="fixed" target="*">half3</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="z" type="double"/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					x = 'r' .. node.x.uid(),
					a = 'r' .. node.a.get_source().uid(),
					z = math.evaluate(node.z.get_value())
				}
				return (('#define x half3( a.x, a.y, half( z ) )'):gsub('[%w_]+', s))
			]]></code>
		</code-generation>
	</node>
	<node type="Convert half2 to half4">
		<description>TODO</description>
		<tool-tip>x = half4( a.x, a.y, z, w )</tool-tip>
		<ports>
			<input name="a">
				<check-type method="list" target="*">half2</check-type>
			</input>
			<output name="x">
				<get-type method="fixed" target="*">half4</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="z" type="double"/>
			<property name="w" type="double"/>
		</properties>
		<code-generation>
			<code method="lua" target="*"><![CDATA[
				local s = {
					x = 'r' .. node.x.uid(),
					a = 'r' .. node.a.get_source().uid(),
					z = math.evaluate(node.z.get_value()),
					w = math.evaluate(node.w.get_value())
				}
				return (('#define x half4( a.x, a.y, half( z ), half( w ) )'):gsub('[%w_]+', s))
			]]></code>
		</code-generation>
	</node>
</library>
