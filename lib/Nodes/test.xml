<?xml version="1.0"?>
<library path="Cg/Arithmetic Operators">
	<node type="User constant">
		<description>An user-defined constant.</description>
		<tool-tip>User constant</tool-tip>
		<ports>
			<output name="d">
				<get-type method="lua" target="*">return node.Type.get_value()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
			<property name="Value" type="text">0</property>
			<property name="Type" type="text">
				<value>float4</value>
				<validator method="lua" target="*"><![CDATA[
					local types = { int = true, float = true, half = true, fixed = true }
					local type = node.Type.get_value()
					local count = type:sub(-1, -1) + 0
					print('VALIDATOR ', type, ' ', count, ' ', types[type:sub(1, -2)] and count >= 1 and count <= 4, '\n')
					return types[type:sub(1, -2)] and count >= 1 and count <= 4
				]]></validator>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">\t${node.d.get_type()} r${node.d.uid()} = ${math.evaluate(node.Value.get_value())};\n</code>
		</code-generation>
	</node>
	<node type="Output color">
		<description>The resulting color of the pixel.</description>
		<tool-tip>Output color</tool-tip>
		<ports>
			<input name="color" required="true">
				<check-type method="fixed" target="*">float4</check-type>
			</input>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="*">\treturn r${node.color.get_source().uid()};\n</code>
		</code-generation>
	</node>
	<node type="Two Operand">
		<description>Select math operation with two operands.</description>
		<tool-tip>d = a [ + | - | * | / ] b</tool-tip>
		<ports>
			<input name="a" required="true">
				<check-type method="regex" target="GLSL">float.*|half.*|fixed.*|int.*</check-type>
			</input>
			<input name="b" required="true">
				<check-type method="regex" target="GLSL">float.*|half.*|fixed.*|int.*</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.a.get_type()</get-type>
			</output>
			<input-constraints method="lua" target="*">return node.a.get_type() == node.b.get_type()</input-constraints>
		</ports>
		<properties>
			<default-properties/>
			<property name="Operator" type="list">
				<options>
					<option value="+">Add</option>
					<option value="-">Subtract</option>
					<option value="*">Multiply</option>
					<option value="/">Divide</option>
				</options>
				<on-changed><![CDATA[
					local labels = { ['+'] = 'Add', ['-'] = 'Subtract', ['*'] = 'Multiply', ['/'] = 'Divide' }
					node.Name.set_value(labels[node.Operator.get_value()])
				]]></on-changed>
			</property>
		</properties>
		<code-generation>
			<code method="var-parse" target="GLSL">
				\t${node.d.get_type()} r${node.d.uid()} = r${node.a.get_source().uid()} ${node.Operator.get_value()} r${node.b.get_source().uid()};\n
			</code>
		</code-generation>
	</node>
	<node type="Neg">
		<description>d = -(a)</description>
		<ports>
			<input name="a" required="true">
				<check-type method="regex" target="GLSL">float.*|half.*|fixed.*|int.*</check-type>
			</input>
			<output name="d">
				<get-type method="lua" target="*">return node.a.get_type()</get-type>
			</output>
		</ports>
		<properties>
			<default-properties/>
		</properties>
		<code-generation>
			<code method="var-parse" target="GLSL">
				\t${node.d.get_type()} r${node.d.uid()} = -(r${node.a.get_source().uid()});\n
			</code>
		</code-generation>
	</node>
</library>
