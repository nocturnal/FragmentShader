-- #################################################### --

local si_xswd = class(Node)

function si_xswd:get_help(out)
  out.write[[ Extend Sign Word to Doubleword  

 rt.d[n] = ext(ra.d[n] & 0xFFFFFFFF) ]]
end

function si_xswd:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rt = self.add_port(Output('rt'))
end

function si_xswd:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_xswd:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t xswd ' .. rt .. ', ' .. ra .. '\n' )
end

function si_xswd:get_tip(out)
  out.write('Extend Sign Word to Doubleword ')
end

function si_xswd:get_type(port)
  return 'qword'
end

-- #################################################### --

local si_xshw = class(Node)

function si_xshw:get_help(out)
  out.write[[ Extend Sign Halfword to Word  

 rt.w[n] = ext(ra.w[n] & 0xFFFF) ]]
end

function si_xshw:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rt = self.add_port(Output('rt'))
end

function si_xshw:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_xshw:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t xshw ' .. rt .. ', ' .. ra .. '\n' )
end

function si_xshw:get_tip(out)
  out.write('Extend Sign Halfword to Word ')
end

function si_xshw:get_type(port)
  return 'qword'
end

-- #################################################### --

local si_xsbh = class(Node)

function si_xsbh:get_help(out)
  out.write[[ Extend Sign Byte to Halfword  

 rt.h[n] = ext(ra.h[n] & 0xFF) ]]
end

function si_xsbh:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rt = self.add_port(Output('rt'))
end

function si_xsbh:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_xsbh:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t xsbh ' .. rt .. ', ' .. ra .. '\n' )
end

function si_xsbh:get_tip(out)
  out.write('Extend Sign Byte to Halfword ')
end

function si_xsbh:get_type(port)
  return 'qword'
end

register {
  __name = 'SPU [Signed Integer Convert]',
  __prologue = '',
  __epilogue = '',
  ['xswd'] = si_xswd,
  ['xshw'] = si_xshw,
  ['xsbh'] = si_xsbh,
}
