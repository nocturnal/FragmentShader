-- #################################################### --

local custom_vf0_vertex_setup_local_position = class(Node)

function custom_vf0_vertex_setup_local_position:get_help(out)
  out.write[[Position of current vertex in local coordinates]]
end

function custom_vf0_vertex_setup_local_position:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float4) Local Position'
end

function custom_vf0_vertex_setup_local_position:get_type(port)
  return 'float4'
end

function custom_vf0_vertex_setup_local_position:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_local_position:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' position\n' )
end

function custom_vf0_vertex_setup_local_position:get_tip(out)
  out.write[[Position of current vertex in local coordinates]]
end

-- #################################################### --

local custom_vf0_vertex_setup_local_normal = class(Node)

function custom_vf0_vertex_setup_local_normal:get_help(out)
  out.write[[Normal of current vertex in local coordinates]]
end

function custom_vf0_vertex_setup_local_normal:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float3) Local Normal'
end

function custom_vf0_vertex_setup_local_normal:get_type(port)
  return 'float3'
end

function custom_vf0_vertex_setup_local_normal:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_local_normal:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' normal\n' )
end

function custom_vf0_vertex_setup_local_normal:get_tip(out)
  out.write[[Normal of current vertex in local coordinates]]
end

-- #################################################### --

local custom_vf0_vertex_setup_local_tangent = class(Node)

function custom_vf0_vertex_setup_local_tangent:get_help(out)
  out.write[[Tagent of current vertex in local coordinates]]
end

function custom_vf0_vertex_setup_local_tangent:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float4) Local Tangent'
end

function custom_vf0_vertex_setup_local_tangent:get_type(port)
  return 'float4'
end

function custom_vf0_vertex_setup_local_tangent:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_local_tangent:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' tangent\n' )
end

function custom_vf0_vertex_setup_local_tangent:get_tip(out)
  out.write[[Tagent of current vertex in local coordinates]]
end

-- #################################################### --

local custom_vf0_vertex_setup_local_to_world_matrix = class(Node)

function custom_vf0_vertex_setup_local_to_world_matrix:get_help(out)
  out.write[[Matrix transforms from local coordinates to world coordinates]]
end

function custom_vf0_vertex_setup_local_to_world_matrix:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float4x4) Local to World Matrix'
end

function custom_vf0_vertex_setup_local_to_world_matrix:get_type(port)
  return 'float4x4'
end

function custom_vf0_vertex_setup_local_to_world_matrix:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_local_to_world_matrix:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' local\n' )
end

function custom_vf0_vertex_setup_local_to_world_matrix:get_tip(out)
  out.write[[Matrix transforms from local coordinates to world coordinates]]
end

-- #################################################### --

local custom_vf0_vertex_setup_uv = class(Node)

function custom_vf0_vertex_setup_uv:get_help(out)
  out.write[[Texture coordinates at current vertex]]
end

function custom_vf0_vertex_setup_uv:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float2) UV'
end

function custom_vf0_vertex_setup_uv:get_type(port)
  return 'float2'
end

function custom_vf0_vertex_setup_uv:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_uv:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' uv\n' )
end

function custom_vf0_vertex_setup_uv:get_tip(out)
  out.write[[Texture coordinates at current vertex]]
end

-- #################################################### --

local custom_vf0_vertex_setup_view_projection_matrix = class(Node)

function custom_vf0_vertex_setup_view_projection_matrix:get_help(out)
  out.write[[Matrix transform from local coordinates to viewport coordinates]]
end

function custom_vf0_vertex_setup_view_projection_matrix:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float4x4) View Projection Matrix'
end

function custom_vf0_vertex_setup_view_projection_matrix:get_type(port)
  return 'float4x4'
end

function custom_vf0_vertex_setup_view_projection_matrix:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_view_projection_matrix:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' view_proj\n' )
end

function custom_vf0_vertex_setup_view_projection_matrix:get_tip(out)
  out.write[[Matrix transform from local coordinates to viewport coordinates]]
end

-- #################################################### --

local custom_vf0_vertex_setup_world_binormal = class(Node)

function custom_vf0_vertex_setup_world_binormal:get_help(out)
  out.write[[Bi-normal of current vertex in world space]]
end

function custom_vf0_vertex_setup_world_binormal:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float3) World Bi-Normal'
end

function custom_vf0_vertex_setup_world_binormal:get_type(port)
  return 'float3'
end

function custom_vf0_vertex_setup_world_binormal:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_world_binormal:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' ws_binormal\n' )
end

function custom_vf0_vertex_setup_world_binormal:get_tip(out)
  out.write[[Bi-normal of current vertex in world space]]
end

-- #################################################### --

local custom_vf0_vertex_setup_world_eye_position = class(Node)

function custom_vf0_vertex_setup_world_eye_position:get_help(out)
  out.write[[Position of "eye" (camera) in world space]]
end

function custom_vf0_vertex_setup_world_eye_position:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float3) World Eye Position'
end

function custom_vf0_vertex_setup_world_eye_position:get_type(port)
  return 'float3'
end

function custom_vf0_vertex_setup_world_eye_position:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_world_eye_position:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' eye_position\n' )
end

function custom_vf0_vertex_setup_world_eye_position:get_tip(out)
  out.write[[Position of "eye" (camera) in world space]]
end

-- #################################################### --

local custom_vf0_vertex_setup_world_normal = class(Node)

function custom_vf0_vertex_setup_world_normal:get_help(out)
  out.write[[Normal of current vertex in world space]]
end

function custom_vf0_vertex_setup_world_normal:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float3) World Normal'
end

function custom_vf0_vertex_setup_world_normal:get_type(port)
  return 'float3'
end

function custom_vf0_vertex_setup_world_normal:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_world_normal:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' ws_normal\n' )
end

function custom_vf0_vertex_setup_world_normal:get_tip(out)
  out.write[[Normal of current vertex in world space]]
end

-- #################################################### --

local custom_vf0_vertex_setup_world_position = class(Node)

function custom_vf0_vertex_setup_world_position:get_help(out)
  out.write[[Position of current vertex in world space]]
end

function custom_vf0_vertex_setup_world_position:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float4) World Position'
end

function custom_vf0_vertex_setup_world_position:get_type(port)
  return 'float4'
end

function custom_vf0_vertex_setup_world_position:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_world_position:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' ws_pos\n' )
end

function custom_vf0_vertex_setup_world_position:get_tip(out)
  out.write[[Position of current vertex in world space]]
end

-- #################################################### --

local custom_vf0_vertex_setup_world_tangent = class(Node)

function custom_vf0_vertex_setup_world_tangent:get_help(out)
  out.write[[Tangent of current vertex in world space]]
end

function custom_vf0_vertex_setup_world_tangent:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float3) World Tangent'
end

function custom_vf0_vertex_setup_world_tangent:get_type(port)
  return 'float3'
end

function custom_vf0_vertex_setup_world_tangent:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_world_tangent:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' ws_tangent\n' )
end

function custom_vf0_vertex_setup_world_tangent:get_tip(out)
  out.write[[Tangent of current vertex in world space]]
end

-- #################################################### --

local custom_vf0_vertex_setup_out_color = class(Node)

function custom_vf0_vertex_setup_out_color:get_help(out)
  out.write[[Color value interpolated and used by fragment shader]]
end

function custom_vf0_vertex_setup_out_color:new()
  Node.new(self)
  self.a = self.add_port(Input('a'))
  self.name = '[OUT] (float4) COLOR'
end

function custom_vf0_vertex_setup_out_color:get_type(port)
  return 'float4'
end

function custom_vf0_vertex_setup_out_color:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_out_color:gen_code(out, scratch)
  local a    = 'r' .. self.a.get_output().hex()
  out.write( '\tout_color = ' .. a .. ';\n' )
end

function custom_vf0_vertex_setup_out_color:get_tip(out)
  out.write[[Color value interpolated and used by fragment shader]]
end

-- #################################################### --

local custom_vf0_vertex_setup_lighting_coefficients = class(Node)

function custom_vf0_vertex_setup_lighting_coefficients:get_help(out)
  out.write[[Values passed to vertex lighting fragment]]
end

function custom_vf0_vertex_setup_lighting_coefficients:new()
  Node.new(self)
  self.a = self.add_port(Input('a'))
  self.choices= { 'c0','c1','c2','c3','c4',}
  self.choice_ndx = 1
  self.name = '[OUT] (float4) Lighting Coefficients (c0)'
end

function custom_vf0_vertex_setup_lighting_coefficients:get_type(port)
  return 'float4'
end

function custom_vf0_vertex_setup_lighting_coefficients:config(props)
  Node.config(self, props)
  props.delete('Name')

  props.list(
    'Select',
    self.choices,
    function() return self.choice_ndx end,
    function(v) self.name = '(float4) Lighting Coefficients (' .. self.choices[v] .. ')' self.choice_ndx = v end
  )
end

function custom_vf0_vertex_setup_lighting_coefficients:gen_code(out, scratch)
  local a    = 'r' .. self.a.get_output().hex()
  local c    = self.choices[ self.choice_ndx ];
  out.write( '\t' .. c .. ' = ' .. a .. ';\n' )
end

function custom_vf0_vertex_setup_lighting_coefficients:get_tip(out)
  out.write[[Values passed to vertex lighting fragment]]
end

-- #################################################### --

local custom_vf0_vertex_setup_out_pos = class(Node)

function custom_vf0_vertex_setup_out_pos:get_help(out)
  out.write[[Position value interpolated and used by fragment shader]]
end

function custom_vf0_vertex_setup_out_pos:new()
  Node.new(self)
  self.a = self.add_port(Input('a'))
  self.name = '[OUT] (float4) POS'
end

function custom_vf0_vertex_setup_out_pos:get_type(port)
  return 'float4'
end

function custom_vf0_vertex_setup_out_pos:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_out_pos:gen_code(out, scratch)
  local a    = 'r' .. self.a.get_output().hex()
  out.write( '\tout_position = ' .. a .. ';\n' )
end

function custom_vf0_vertex_setup_out_pos:get_tip(out)
  out.write[[Position value interpolated and used by fragment shader]]
end

-- #################################################### --

local custom_vf0_vertex_setup_out_uv = class(Node)

function custom_vf0_vertex_setup_out_uv:get_help(out)
  out.write[[UV value interpolated and used by fragment shader]]
end

function custom_vf0_vertex_setup_out_uv:new()
  Node.new(self)
  self.a = self.add_port(Input('a'))
  self.name = '[OUT] (float4) UV'
end

function custom_vf0_vertex_setup_out_uv:get_type(port)
  return 'float4'
end

function custom_vf0_vertex_setup_out_uv:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_vertex_setup_out_uv:gen_code(out, scratch)
  local a    = 'r' .. self.a.get_output().hex()
  out.write( '\tout_uv = ' .. a .. ';\n' )
end

function custom_vf0_vertex_setup_out_uv:get_tip(out)
  out.write[[UV value interpolated and used by fragment shader]]
end

-- #################################################### --

local custom_vf0_vertex_setup_vertex_arguments = class(Node)

function custom_vf0_vertex_setup_vertex_arguments:get_help(out)
  out.write[[Generic arguments interpolated and used by fragment shader]]
end

function custom_vf0_vertex_setup_vertex_arguments:new()
  Node.new(self)
  self.a = self.add_port(Input('a'))
  self.choices= { 'out_arg0','out_arg1','out_arg2',}
  self.choice_ndx = 1
  self.name = '[OUT] (float4) Vertex Arguments (out_arg0)'
end

function custom_vf0_vertex_setup_vertex_arguments:get_type(port)
  return 'float4'
end

function custom_vf0_vertex_setup_vertex_arguments:config(props)
  Node.config(self, props)
  props.delete('Name')

  props.list(
    'Select',
    self.choices,
    function() return self.choice_ndx end,
    function(v) self.name = '(float4) Vertex Arguments (' .. self.choices[v] .. ')' self.choice_ndx = v end
  )
end

function custom_vf0_vertex_setup_vertex_arguments:gen_code(out, scratch)
  local a    = 'r' .. self.a.get_output().hex()
  local c    = self.choices[ self.choice_ndx ];
  out.write( '\t' .. c .. ' = ' .. a .. ';\n' )
end

function custom_vf0_vertex_setup_vertex_arguments:get_tip(out)
  out.write[[Generic arguments interpolated and used by fragment shader]]
end


-- #################################################### --

register {
  __name = 'Cg [_CustomVF0 Vertex Setup]',
  __prologue = '',
  __epilogue = '',

  ['[IN] (float4) Local Position'] = custom_vf0_vertex_setup_local_position,
  ['[IN] (float3) Local Normal'] = custom_vf0_vertex_setup_local_normal,
  ['[IN] (float4) Local Tangent'] = custom_vf0_vertex_setup_local_tangent,
  ['[IN] (float4x4) Local to World Matrix'] = custom_vf0_vertex_setup_local_to_world_matrix,
  ['[IN] (float2) UV'] = custom_vf0_vertex_setup_uv,
  ['[IN] (float4x4) View Projection Matrix'] = custom_vf0_vertex_setup_view_projection_matrix,
  ['[IN] (float3) World Bi-Normal'] = custom_vf0_vertex_setup_world_binormal,
  ['[IN] (float3) World Eye Position'] = custom_vf0_vertex_setup_world_eye_position,
  ['[IN] (float3) World Normal'] = custom_vf0_vertex_setup_world_normal,
  ['[IN] (float4) World Position'] = custom_vf0_vertex_setup_world_position,
  ['[IN] (float3) World Tangent'] = custom_vf0_vertex_setup_world_tangent,
  ['[OUT] (float4) COLOR'] = custom_vf0_vertex_setup_out_color,
  ['[OUT] (float4) Lighting Coefficients (c0)'] = custom_vf0_vertex_setup_lighting_coefficients,
  ['[OUT] (float4) POS'] = custom_vf0_vertex_setup_out_pos,
  ['[OUT] (float4) UV'] = custom_vf0_vertex_setup_out_uv,
  ['[OUT] (float4) Vertex Arguments (out_arg0)'] = custom_vf0_vertex_setup_vertex_arguments,
}
