-- #################################################### --

local custom_vf0_fragment_lighting_texture_sampler = class(Node)

function custom_vf0_fragment_lighting_texture_sampler:get_help(out)
  out.write[[Access textures (decal0-decal2)]]
end

function custom_vf0_fragment_lighting_texture_sampler:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.choices= { 'decal0','decal1','decal2',}
  self.choice_ndx = 1
  self.name = '[IN] (sampler2D) Texture Sampler (decal0)'
end

function custom_vf0_fragment_lighting_texture_sampler:get_type(port)
  return 'sampler2D'
end

function custom_vf0_fragment_lighting_texture_sampler:config(props)
  Node.config(self, props)
  props.delete('Name')

  props.list(
    'Select',
    self.choices,
    function() return self.choice_ndx end,
    function(v) self.name = '(sampler2D) Texture Sampler (' .. self.choices[v] .. ')' self.choice_ndx = v end
  )
end

function custom_vf0_fragment_lighting_texture_sampler:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' ' .. self.choices[self.choice_ndx] .. '\n' )
end

function custom_vf0_fragment_lighting_texture_sampler:get_tip(out)
  out.write[[Access textures (decal0-decal2)]]
end

-- #################################################### --

local custom_vf0_fragment_lighting_uv = class(Node)

function custom_vf0_fragment_lighting_uv:get_help(out)
  out.write[[Texture coordinates]]
end

function custom_vf0_fragment_lighting_uv:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float2) UV'
end

function custom_vf0_fragment_lighting_uv:get_type(port)
  return 'float2'
end

function custom_vf0_fragment_lighting_uv:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_fragment_lighting_uv:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' float2(uv.xy)\n' )
end

function custom_vf0_fragment_lighting_uv:get_tip(out)
  out.write[[Texture coordinates]]
end

-- #################################################### --

local custom_vf0_fragment_lighting_position = class(Node)

function custom_vf0_fragment_lighting_position:get_help(out)
  out.write[[Projected position]]
end

function custom_vf0_fragment_lighting_position:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float4) Position'
end

function custom_vf0_fragment_lighting_position:get_type(port)
  return 'float4'
end

function custom_vf0_fragment_lighting_position:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_fragment_lighting_position:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' position\n' )
end

function custom_vf0_fragment_lighting_position:get_tip(out)
  out.write[[Projected position]]
end

-- #################################################### --

local custom_vf0_fragment_lighting_vertex_arguments = class(Node)

function custom_vf0_fragment_lighting_vertex_arguments:get_help(out)
  out.write[[Values passed in from the vertex setup fragment]]
end

function custom_vf0_fragment_lighting_vertex_arguments:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.choices= { 'arg0','arg1','arg2',}
  self.choice_ndx = 1
  self.name = '[IN] (float4) Vertex Arguments (arg0)'
end

function custom_vf0_fragment_lighting_vertex_arguments:get_type(port)
  return 'float4'
end

function custom_vf0_fragment_lighting_vertex_arguments:config(props)
  Node.config(self, props)
  props.delete('Name')

  props.list(
    'Select',
    self.choices,
    function() return self.choice_ndx end,
    function(v) self.name = '(float4) Vertex Arguments (' .. self.choices[v] .. ')' self.choice_ndx = v end
  )
end

function custom_vf0_fragment_lighting_vertex_arguments:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' ' .. self.choices[self.choice_ndx] .. '\n' )
end

function custom_vf0_fragment_lighting_vertex_arguments:get_tip(out)
  out.write[[Values passed in from the vertex setup fragment]]
end

-- #################################################### --

local custom_vf0_fragment_lighting_normal_scale = class(Node)

function custom_vf0_fragment_lighting_normal_scale:get_help(out)
  out.write[[Normal scale set in shader]]
end

function custom_vf0_fragment_lighting_normal_scale:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float) Normal Scale'
end

function custom_vf0_fragment_lighting_normal_scale:get_type(port)
  return 'float'
end

function custom_vf0_fragment_lighting_normal_scale:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_fragment_lighting_normal_scale:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' float(normal_scale.x)\n' )
end

function custom_vf0_fragment_lighting_normal_scale:get_tip(out)
  out.write[[Normal scale set in shader]]
end

-- #################################################### --

local custom_vf0_fragment_lighting_light_color = class(Node)

function custom_vf0_fragment_lighting_light_color:get_help(out)
  out.write[[The color of the current light]]
end

function custom_vf0_fragment_lighting_light_color:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float4) Light Color'
end

function custom_vf0_fragment_lighting_light_color:get_type(port)
  return 'float4'
end

function custom_vf0_fragment_lighting_light_color:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_fragment_lighting_light_color:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' light_color[i]\n' )
end

function custom_vf0_fragment_lighting_light_color:get_tip(out)
  out.write[[The color of the current light]]
end

-- #################################################### --

local custom_vf0_fragment_lighting_lighting_coefficients = class(Node)

function custom_vf0_fragment_lighting_lighting_coefficients:get_help(out)
  out.write[[Per light values assigned in fragment setup]]
end

function custom_vf0_fragment_lighting_lighting_coefficients:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.choices= { 'c0','c1','c2','c3','c4',}
  self.choice_ndx = 1
  self.name = '[IN] (float4) Lighting Coefficients (c0)'
end

function custom_vf0_fragment_lighting_lighting_coefficients:get_type(port)
  return 'float4'
end

function custom_vf0_fragment_lighting_lighting_coefficients:config(props)
  Node.config(self, props)
  props.delete('Name')

  props.list(
    'Select',
    self.choices,
    function() return self.choice_ndx end,
    function(v) self.name = '(float4) Lighting Coefficients (' .. self.choices[v] .. ')' self.choice_ndx = v end
  )
end

function custom_vf0_fragment_lighting_lighting_coefficients:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' ' .. self.choices[self.choice_ndx] .. '\n' )
end

function custom_vf0_fragment_lighting_lighting_coefficients:get_tip(out)
  out.write[[Per light values assigned in fragment setup]]
end

-- #################################################### --

local custom_vf0_fragment_lighting_vertex_light_argument = class(Node)

function custom_vf0_fragment_lighting_vertex_light_argument:get_help(out)
  out.write[[Per light value assigned in the vertex light fragment]]
end

function custom_vf0_fragment_lighting_vertex_light_argument:new()
  Node.new(self)
  self.d = self.add_port(Output('d'))
  self.name = '[IN] (float4) Vertex Light Argument'
end

function custom_vf0_fragment_lighting_vertex_light_argument:get_type(port)
  return 'float4'
end

function custom_vf0_fragment_lighting_vertex_light_argument:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_fragment_lighting_vertex_light_argument:gen_code(out, scratch)
  out.write( '\t#define r' .. self.d.hex() .. ' light_arg[i]\n' )
end

function custom_vf0_fragment_lighting_vertex_light_argument:get_tip(out)
  out.write[[Per light value assigned in the vertex light fragment]]
end

-- #################################################### --

local custom_vf0_fragment_lighting_final_light_color = class(Node)

function custom_vf0_fragment_lighting_final_light_color:get_help(out)
  out.write[[Assigns the (additive color) contribution by the current light]]
end

function custom_vf0_fragment_lighting_final_light_color:new()
  Node.new(self)
  self.a = self.add_port(Input('a'))
  self.name = '[OUT] (float4) Final Light Color'
end

function custom_vf0_fragment_lighting_final_light_color:get_type(port)
  return 'float4'
end

function custom_vf0_fragment_lighting_final_light_color:config(props)
  Node.config(self, props)
  props.delete('Name')

end

function custom_vf0_fragment_lighting_final_light_color:gen_code(out, scratch)
  local a    = 'r' .. self.a.get_output().hex()
  out.write( '\tfinal_light_color = ' .. a .. ';\n' )
end

function custom_vf0_fragment_lighting_final_light_color:get_tip(out)
  out.write[[Assigns the (additive color) contribution by the current light]]
end


-- #################################################### --

register {
  __name = 'Cg [_CustomVF0 Fragment Lighting]',
  __prologue = '',
  __epilogue = '',

  ['[IN] (sampler2D) Texture Sampler (decal0)'] = custom_vf0_fragment_lighting_texture_sampler,
  ['[IN] (float2) UV'] = custom_vf0_fragment_lighting_uv,
  ['[IN] (float4) Position'] = custom_vf0_fragment_lighting_position,
  ['[IN] (float4) Vertex Arguments (arg0)'] = custom_vf0_fragment_lighting_vertex_arguments,
  ['[IN] (float) Normal Scale'] = custom_vf0_fragment_lighting_normal_scale,
  ['[IN] (float4) Light Color'] = custom_vf0_fragment_lighting_light_color,
  ['[IN] (float4) Lighting Coefficients (c0)'] = custom_vf0_fragment_lighting_lighting_coefficients,
  ['[IN] (float4) Vertex Light Argument'] = custom_vf0_fragment_lighting_vertex_light_argument,
  ['[OUT] (float4) Final Light Color'] = custom_vf0_fragment_lighting_final_light_color,
}
