-- #################################################### --

local si_frds = class(Node)

function si_frds:get_help(out)
  out.write[[ Floating Round Double to Single  

 TODO ]]
end

function si_frds:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rt = self.add_port(Output('rt'))
end

function si_frds:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_frds:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t frds ' .. rt .. ', ' .. ra .. '\n' )
end

function si_frds:get_tip(out)
  out.write('Floating Round Double to Single ')
end

function si_frds:get_type(port)
  return 'qword'
end

-- #################################################### --

local si_fesd = class(Node)

function si_fesd:get_help(out)
  out.write[[ Floating Extend Single to Double  

 TODO ]]
end

function si_fesd:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rt = self.add_port(Output('rt'))
end

function si_fesd:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_fesd:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t fesd ' .. rt .. ', ' .. ra .. '\n' )
end

function si_fesd:get_tip(out)
  out.write('Floating Extend Single to Double ')
end

function si_fesd:get_type(port)
  return 'qword'
end

register {
  __name = 'SPU [Double Convert]',
  __prologue = '',
  __epilogue = '',
  ['frds'] = si_frds,
  ['fesd'] = si_fesd,
}
