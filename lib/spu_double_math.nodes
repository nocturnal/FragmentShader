-- #################################################### --

local si_dfa = class(Node)

function si_dfa:get_help(out)
  out.write[[ Double Floating Add  

 TODO ]]
end

function si_dfa:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rb = self.add_port(Input('rb'))
  self.rt = self.add_port(Output('rt'))
end

function si_dfa:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_dfa:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  local rb = 'r' .. self.rb.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t dfa ' .. rt .. ', ' .. ra .. ', ' .. rb .. '\n' )
end

function si_dfa:get_tip(out)
  out.write('Double Floating Add ')
end

function si_dfa:get_type(port)
  return 'qword'
end

-- #################################################### --

local si_dfs = class(Node)

function si_dfs:get_help(out)
  out.write[[ Double Floating Subtract  

 TODO ]]
end

function si_dfs:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rb = self.add_port(Input('rb'))
  self.rt = self.add_port(Output('rt'))
end

function si_dfs:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_dfs:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  local rb = 'r' .. self.rb.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t dfs ' .. rt .. ', ' .. ra .. ', ' .. rb .. '\n' )
end

function si_dfs:get_tip(out)
  out.write('Double Floating Subtract ')
end

function si_dfs:get_type(port)
  return 'qword'
end

-- #################################################### --

local si_dfm = class(Node)

function si_dfm:get_help(out)
  out.write[[ Double Floating Multiply  

 TODO ]]
end

function si_dfm:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rb = self.add_port(Input('rb'))
  self.rt = self.add_port(Output('rt'))
end

function si_dfm:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_dfm:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  local rb = 'r' .. self.rb.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t dfm ' .. rt .. ', ' .. ra .. ', ' .. rb .. '\n' )
end

function si_dfm:get_tip(out)
  out.write('Double Floating Multiply ')
end

function si_dfm:get_type(port)
  return 'qword'
end

-- #################################################### --

local si_dfma = class(Node)

function si_dfma:get_help(out)
  out.write[[ Double Floating Multiply and Add  

 TODO ]]
end

function si_dfma:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rb = self.add_port(Input('rb'))
  self.rt = self.add_port(Output('rt'))
end

function si_dfma:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_dfma:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  local rb = 'r' .. self.rb.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t dfma ' .. rt .. ', ' .. ra .. ', ' .. rb .. '\n' )
end

function si_dfma:get_tip(out)
  out.write('Double Floating Multiply and Add ')
end

function si_dfma:get_type(port)
  return 'qword'
end

-- #################################################### --

local si_dfms = class(Node)

function si_dfms:get_help(out)
  out.write[[ Double Floating Multiply and Subtract  

 TODO ]]
end

function si_dfms:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rb = self.add_port(Input('rb'))
  self.rt = self.add_port(Output('rt'))
end

function si_dfms:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_dfms:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  local rb = 'r' .. self.rb.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t dfms ' .. rt .. ', ' .. ra .. ', ' .. rb .. '\n' )
end

function si_dfms:get_tip(out)
  out.write('Double Floating Multiply and Subtract ')
end

function si_dfms:get_type(port)
  return 'qword'
end

-- #################################################### --

local si_dfnma = class(Node)

function si_dfnma:get_help(out)
  out.write[[ Double Floating Negative Multiply and Add  

 TODO ]]
end

function si_dfnma:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rb = self.add_port(Input('rb'))
  self.rt = self.add_port(Output('rt'))
end

function si_dfnma:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_dfnma:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  local rb = 'r' .. self.rb.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t dfnma ' .. rt .. ', ' .. ra .. ', ' .. rb .. '\n' )
end

function si_dfnma:get_tip(out)
  out.write('Double Floating Negative Multiply and Add ')
end

function si_dfnma:get_type(port)
  return 'qword'
end

-- #################################################### --

local si_dfnms = class(Node)

function si_dfnms:get_help(out)
  out.write[[ Double Floating Negative Multiply and Subtract  

 TODO ]]
end

function si_dfnms:new()
  Node.new(self)
  self.ra = self.add_port(Input('ra'))
  self.rb = self.add_port(Input('rb'))
  self.rt = self.add_port(Output('rt'))
end

function si_dfnms:config(props)
  Node.config(self, props)
  props.delete('Name')
end

function si_dfnms:gen_code(out, scratch)
  local rt = 'r' .. self.rt.hex()
  local ra = 'r' .. self.ra.get_output().hex()
  local rb = 'r' .. self.rb.get_output().hex()
  out.write( '\t .reg ' .. rt .. '\n')
  out.write( '\t dfnms ' .. rt .. ', ' .. ra .. ', ' .. rb .. '\n' )
end

function si_dfnms:get_tip(out)
  out.write('Double Floating Negative Multiply and Subtract ')
end

function si_dfnms:get_type(port)
  return 'qword'
end

register {
  __name = 'SPU [Double Math]',
  __prologue = '',
  __epilogue = '',
  ['dfa'] = si_dfa,
  ['dfs'] = si_dfs,
  ['dfm'] = si_dfm,
  ['dfma'] = si_dfma,
  ['dfms'] = si_dfms,
  ['dfnma'] = si_dfnma,
  ['dfnms'] = si_dfnms,
}
